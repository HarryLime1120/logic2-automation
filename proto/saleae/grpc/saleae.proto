syntax = "proto3";

option java_multiple_files = true;
option java_package = "saleae";
option java_outer_classname = "SaleaeProto";
option objc_class_prefix = "Saleae";

package saleae.automation;

// Saleae Logic 2 Automation API


/*****************************************************************************
 *
 * gRPC API
 *
 ****************************************************************************/

service Manager {
    // Get list of connected devices.
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesReply) {}

    // Start a capture
    rpc StartCapture(StartCaptureRequest) returns (StartCaptureReply) {}

    // Stop an active capture
    rpc StopCapture(StopCaptureRequest) returns (StopCaptureReply) {}

    // Wait until a capture has completed
    rpc WaitCapture(WaitCaptureRequest) returns (WaitCaptureReply) {}

    // Load a capture from file.
    rpc LoadCapture(LoadCaptureRequest) returns (LoadCaptureReply) {}

    // Save a capture to file.
    rpc SaveCapture(SaveCaptureRequest) returns (SaveCaptureReply) {}

    // Close a capture.
    // Note: It is recommended to close a capture once it is no longer being used
    // so that any consumed resources can be released.
    rpc CloseCapture(CloseCaptureRequest) returns (CloseCaptureReply) {}

    // Add an analyzer to a capture.
    rpc AddAnalyzer(AddAnalyzerRequest) returns (AddAnalyzerReply) {}

    // Remove an analyzer from a capture.
    rpc RemoveAnalyzer(RemoveAnalyzerRequest) returns (RemoveAnalyzerReply) {}

    // Add a high-level-analyzer to a capture.
    rpc AddHighLevelAnalyzer(AddHighLevelAnalyzerRequest) returns (AddHighLevelAnalyzerReply) {}

    // Export raw channel data to CSV files.
    rpc ExportRawDataCsv(ExportRawDataCsvRequest)
            returns (ExportRawDataCsvReply) {}

    // Export raw channel data to binary files.
    rpc ExportRawDataBinary(ExportRawDataBinaryRequest)
            returns (ExportRawDataBinaryReply) {}

    // Export analyzer data to CSV file.
    rpc ExportDataTable(ExportDataTableRequest) returns (ExportDataTableReply) {}

    // Export custom analyzer export data to file.
    rpc ExportAnalyzerLegacy(ExportAnalyzerLegacyRequest)
            returns (ExportAnalyzerLegacyReply) {}
}



/*****************************************************************************
 *
 * Core Types
 *
 ****************************************************************************/

enum ErrorCode {
    ERROR_CODE_UNSPECIFIED = 0; // Not used

    // Unexpected Saleae Internal Error.
    ERROR_CODE_INTERNAL_EXCEPTION = 1;

    // Request is invalid, usually because of invalid arguments.
    //
    // Examples:
    //     Invalid Capture Id - capture does not exist
    //     Missing filepath
    ERROR_CODE_INVALID_REQUEST = 10;

    ERROR_CODE_LOAD_CAPTURE_FAILED = 20;
    ERROR_CODE_EXPORT_FAILED = 21;

    ERROR_CODE_MISSING_DEVICE = 50;
    ERROR_CODE_DEVICE_ERROR = 51;
    ERROR_CODE_OOM = 52;
}

enum RadixType {
    RADIX_TYPE_UNSPECIFIED = 0;

    RADIX_TYPE_BINARY = 1;
    RADIX_TYPE_DECIMAL = 2;
    RADIX_TYPE_HEXADECIMAL = 3;
    RADIX_TYPE_ASCII = 4;
};

enum DeviceType {
    // Invalid Device Type
    DEVICE_TYPE_UNSPECIFIED = 0;

    // Saleae Logic
    DEVICE_TYPE_LOGIC = 1;

    // Saleae Logic 4
    DEVICE_TYPE_LOGIC_4 = 2;

    // Saleae Logic 8
    DEVICE_TYPE_LOGIC_8 = 3;

    // Saleae Logic 16 
    DEVICE_TYPE_LOGIC_16 = 4;

    // Saleae Logic Pro 8
    DEVICE_TYPE_LOGIC_PRO_8 = 5;

    // Saleae Logic Pro 16
    DEVICE_TYPE_LOGIC_PRO_16 = 6;
}

// Device descriptor object.
message Device {
    // The serial number of this device
    string serial_number = 1;

    // The type of this device
    DeviceType device_type = 2;

    // True if this is a simulation device
    bool is_simulation = 3;
}

enum ChannelType {
    CHANNEL_TYPE_UNSPECIFIED = 0;

    // Digial channel
    CHANNEL_TYPE_DIGITAL = 1;

    // Analog channel
    CHANNEL_TYPE_ANALOG = 2;
}

// Identification for a channel.
message ChannelIdentifier {
    // Device id
    uint64 device_id = 1;

    // Channel type.
    ChannelType type = 2;

    // Index of channel.
    uint64 index = 3;
}

message CaptureInfo {
    // Id of the capture.
    uint64 capture_id = 1;
}

message LogicDeviceConfiguration {
    // Digital channel indices to enabled
    repeated uint32 enabled_digital_channels = 1;

    // Analog channel indices to enabled
    repeated uint32 enabled_analog_channels = 2;

    // Digital Sample Rate
    uint32 digital_sample_rate = 3;

    // Analog Sample Rate
    uint32 analog_sample_rate = 4;

    // For Pro 8 and Pro 16, this can be one of: 1.2, 1.8, or 3.3
    // For other devices this is ignored
    double digital_threshold_volts = 5;

    // Glitch filter to apply to digital data
    repeated GlitchFilterEntry glitch_filters = 6;
}

message GlitchFilterEntry {
    // Channel index
    uint32 channel_index = 1;

    // Minimum pulse width, in seconds
    double pulse_width_seconds = 2;
}

message ManualCaptureMode { 
    // Number of seconds to keep after the capture ends
    double trim_data_seconds = 1;
}

message TimedCaptureMode {
    // Seconds of data to capture
    double duration_seconds = 1;

    // Number of seconds to keep after the capture ends
    double trim_data_seconds = 2;
}

enum DigitalTriggerType {
    DIGITAL_TRIGGER_TYPE_UNSPECIFIED = 0;

    DIGITAL_TRIGGER_TYPE_RISING = 1;
    DIGITAL_TRIGGER_TYPE_FALLING = 2;
    DIGITAL_TRIGGER_TYPE_PULSE_HIGH = 3;
    DIGITAL_TRIGGER_TYPE_PULSE_LOW = 4;
}

message DigitalTriggerLinkedChannel {
    uint32 channel_index = 1;
    DigitalTriggerLinkedChannelState state = 2;
}

enum DigitalTriggerLinkedChannelState {
    DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_UNSPECIFIED = 0;

    DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_LOW = 1;
    DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_HIGH = 2;
}

message DigitalTriggerCaptureMode {
    DigitalTriggerType trigger_type = 1;

    // Number of seconds to continue capturing after trigger
    double after_trigger_seconds = 2;

    // Number of seconds to keep after the capture ends
    double trim_data_seconds = 3;

    // Index of channel to trigger on
    uint32 trigger_channel_index = 4;

    // Minimum pulse width to trigger on, in seconds
    double min_pulse_width_seconds = 5;

    // Maximum pulse width to trigger on, in seconds
    double max_pulse_width_seconds = 6;

    // Other channel conditions
    repeated DigitalTriggerLinkedChannel linked_channels = 7;
}

message CaptureConfiguration {
    // Capture buffer size (in megabytes)
    uint32 buffer_size = 1;

    // Capture mode
    oneof capture_mode {
        ManualCaptureMode manual_capture_mode = 2;
        TimedCaptureMode timed_capture_mode = 3;
        DigitalTriggerCaptureMode digital_capture_mode = 4;
    }
}



/*****************************************************************************
 *
 * Request/Reply Messages
 *
 ****************************************************************************/

message GetDevicesRequest {
    // If true, simulation devices will be included in the response
    bool include_simulation_devices = 1;
}
message GetDevicesReply { repeated Device devices = 1; }

// Start Capture
message StartCaptureRequest {
    string device_serial_number = 1;

    oneof device_configuration {
        LogicDeviceConfiguration logic_device_configuration = 2;
    }

    CaptureConfiguration capture_configuration = 3;
}
message StartCaptureReply { CaptureInfo capture_info = 1; }

// Stop Capture
message StopCaptureRequest { uint64 capture_id = 1; }
message StopCaptureReply {}

// Stop Capture
message WaitCaptureRequest { uint64 capture_id = 1; }
message WaitCaptureReply {}

// Load Capture
message LoadCaptureRequest {
    // Filepath of Logic 2 .sal capture file to load.
    string filepath = 1;
}
message LoadCaptureReply {
    // Information about the capture that was loaded.
    CaptureInfo capture_info = 1;
}

message SaveCaptureRequest {
    // Id of capture to save.
    uint64 capture_id = 1;

    // Full filepath to save the file to, usually ending in ".sal".
    string filepath = 2;
}
message SaveCaptureReply {}

message CloseCaptureRequest {
    // Id of capture to close.
    uint64 capture_id = 1;
}
message CloseCaptureReply {}

message ExportRawDataCsvRequest {
    // Id of capture to export data from.
    uint64 capture_id = 1;

    // Directory to create exported CSV files in.
    string directory = 2;

    // Channels to export.
    repeated ChannelIdentifier channels = 3;

    // Must be between 1 and 1,000,000, inclusive.
    uint64 analog_downsample_ratio = 4;

    // If true, timestamps will be in ISO8601 format.
    bool iso8601 = 5;
}
message ExportRawDataCsvReply {}

message ExportRawDataBinaryRequest {
    // Id of capture to export data from.
    uint64 capture_id = 1;

    // Directory to create exported binary files in.
    string directory = 2;

    // Channels to export.
    repeated ChannelIdentifier channels = 3;

    // Must be between 1 and 1,000,000, inclusive.
    uint64 analog_downsample_ratio = 4;
}
message ExportRawDataBinaryReply {}

message AnalyzerSettingValue {
    oneof value {
        // String value
        string string_value = 1;

        // Integer value
        int64 int64_value = 2;

        // Boolean value
        bool bool_value = 3;

        // Double floating-point value
        double double_value = 4;
    }
}
message AddAnalyzerRequest {
    // Id of capture to add analyzer to.
    uint64 capture_id = 1;

    // Name of analyzer. This should exactly match the name seen in the
    // application. Examples: "SPI", "I2C", "Async Serial"
    string analyzer_name = 2;

    // User-facing name for the analyzer.
    string analyzer_label = 3;

    // Analyzer settings. These should match the names shown in analyzer's
    // settings shown in the application.
    map<string, AnalyzerSettingValue> settings = 4;
}
message AddAnalyzerReply {
    // Id of the newly created analyzer.
    uint64 analyzer_id = 1;
}

message HighLevelAnalyzerSettingValue {
    oneof value {
        // String value
        string string_value = 1;

        // Double-precision floating point value
        double number_value = 2;
    }
}
message AddHighLevelAnalyzerRequest {
    // Id of capture to add analyzer to.
    uint64 capture_id = 1;

    // The path to the root of the directory to load the HLA from.
    string root_path = 2;

    // The entry point to the HLA - this is the root-path relative path to the HLA class to add.
    string entry_point = 3;

    // User-facing name for the analyzer.
    string analyzer_label = 4;

    // Id of analyzer to use as input to this HLA
    uint64 input_analyzer_id = 5;

    // Analyzer settings. These should match the names shown in analyzer's
    // settings shown in the application.
    map<string, HighLevelAnalyzerSettingValue> settings = 6;

}
message AddHighLevelAnalyzerReply {
    // Id of the newly created analyzer.
    uint64 analyzer_id = 1;
}

message RemoveAnalyzerRequest {
    // Id of capture to remove analyzer from.
    uint64 capture_id = 1;

    // Id of analyzer to remove.
    uint64 analyzer_id = 2;
}
message RemoveAnalyzerReply {}


message DataTableAnalyzerConfiguration {
    // Id of analyzers to export data from.
    uint64 analyzer_id = 1;

    // Radix type to use for this analyzer
    RadixType radix_type = 2;
}
message DataTableFilter {
    // Query to filter by
    string query = 1;

    // Columns to query
    repeated string columns = 2;
}
message ExportDataTableRequest {
    // Id of capture to export data from.
    uint64 capture_id = 1;

    // Path to export CSV data to.
    string filepath = 2;

    // Id of analyzers to export data from.
    repeated DataTableAnalyzerConfiguration analyzers = 3;

    // If true, timestamps will be in ISO8601 format.
    bool iso8601 = 4;

    // Columns to export. If empty, all columns will be exported.
    repeated string export_columns = 5;

    DataTableFilter filter = 6;
}
message ExportDataTableReply {}

message ExportAnalyzerLegacyRequest {
    // Id of capture to export data from.
    uint64 capture_id = 1;

    // Path to export data to.
    string filepath = 2;

    // Id of analyzer to export data from.
    uint64 analyzer_id = 3;

    // Radix to use for exported data.
    RadixType radix_type = 4;
}
message ExportAnalyzerLegacyReply {}
